"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[330],{30490:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"This function creates a new [Group] object.","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"permissions","desc":"The permission nodes that the group will contain","lua_type":"{string}?"},{"name":"inheritant","desc":"The group that will be inherited","lua_type":"Group?"}],"returns":[{"desc":"","lua_type":"Group"}],"function_type":"static","source":{"line":22,"path":"lib/Group.lua"}},{"name":"SetInheritant","desc":"This method will set this [Group._Inheritant] to the target [Group] and will inherit that groups permissions.","params":[{"name":"inheritant","desc":"The group that will be inherited","lua_type":"Group"}],"returns":[{"desc":"The group object is returned for chaining","lua_type":"Group"}],"function_type":"method","tags":["chainable"],"source":{"line":97,"path":"lib/Group.lua"}},{"name":"SetPrecedence","desc":"This method will set the [Group._Precedence] property.","params":[{"name":"precedence","desc":"","lua_type":"number"}],"returns":[{"desc":"The group object is returned for chaining","lua_type":"Group"}],"function_type":"method","tags":["chainable"],"source":{"line":111,"path":"lib/Group.lua"}},{"name":"SetPrefix","desc":"This method will set the [Group._Prefix] property.","params":[{"name":"prefix","desc":"","lua_type":"string"}],"returns":[{"desc":"The group object is returned for chaining","lua_type":"Group"}],"function_type":"method","tags":["chainable"],"source":{"line":125,"path":"lib/Group.lua"}},{"name":"GrantPermission","desc":"This method grants a permission node to the [Group].","params":[{"name":"permission","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":141,"path":"lib/Group.lua"}},{"name":"RevokePermission","desc":"This method revokes a permission node from the [Group].","params":[{"name":"permission","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":158,"path":"lib/Group.lua"}},{"name":"HasPermission","desc":"This method checks if this [Group] has a specific permission node.\\nNegated permission nodes take priority, and when present in\\nthe Group\'s permissions, this function will return false.","params":[{"name":"permission","desc":"The permission node that will be queried","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","source":{"line":173,"path":"lib/Group.lua"}}],"properties":[{"name":"Name","desc":"This is a property stores the name of the [Group].\\n    ","lua_type":"string","tags":["object-prop"],"source":{"line":31,"path":"lib/Group.lua"}},{"name":"_Prefix","desc":"This is a internal property that stores the prefix of this [Group].\\n    ","lua_type":"string","tags":["object-prop"],"private":true,"source":{"line":41,"path":"lib/Group.lua"}},{"name":"_Inheritant","desc":"This is a internal property that stores the inherited group if there is one.\\n    ","lua_type":"Group?","tags":["object-prop"],"private":true,"source":{"line":51,"path":"lib/Group.lua"}},{"name":"_Permissions","desc":"This is a internal property that stores the permission nodes of this [Group].\\n    ","lua_type":"{string}","tags":["object-prop"],"private":true,"source":{"line":61,"path":"lib/Group.lua"}},{"name":"_Precedence","desc":"This is a internal property that stores the order of precedence of this [Group].\\n\\n:::note\\n\\n>The [Group._Precendence] can be -1 which will ignore it from being queried in [Permissions.FindHighestGroupPrecedence]\\n\\n:::\\n    ","lua_type":"number","tags":["object-prop"],"private":true,"source":{"line":84,"path":"lib/Group.lua"}}],"types":[],"name":"Group","desc":"This class was designed for creating groups and storing permissions within those groups.","source":{"line":12,"path":"lib/Group.lua"}}')}}]);