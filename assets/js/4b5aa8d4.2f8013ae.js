"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[264],{65658:e=>{e.exports=JSON.parse('{"functions":[{"name":"Init","desc":"This method **Must** be called before using any other functions inside Permissions.","params":[{"name":"permissionsConfig","desc":"The config used for setting up and storing the preset permissions & groups","lua_type":"ModuleScript?"}],"returns":[{"desc":"","lua_type":"Permissions\\r\\n"}],"function_type":"static","source":{"line":132,"path":"lib/init.lua"}},{"name":"FindGroup","desc":"","params":[{"name":"name","desc":"The name of the group to query.","lua_type":"string"}],"returns":[{"desc":"The group that was found or nil if no group was found.","lua_type":"Group"}],"function_type":"static","source":{"line":164,"path":"lib/init.lua"}},{"name":"IsUserInGroup","desc":"This method is for checking if a user is in a specific group returning true if they are otherwise false","params":[{"name":"plr","desc":"","lua_type":"Player"},{"name":"group","desc":"","lua_type":"Group"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":172,"path":"lib/init.lua"}},{"name":"SetUserGroup","desc":"This function is used to set a group to a user(player)","params":[{"name":"plr","desc":"","lua_type":"Player"},{"name":"group","desc":"","lua_type":"Group"}],"returns":[],"function_type":"static","source":{"line":182,"path":"lib/init.lua"}},{"name":"RemoveUserGroup","desc":"This function is used to remove a group from a user(player).","params":[{"name":"plr","desc":"","lua_type":"Player"},{"name":"group","desc":"","lua_type":"Group"}],"returns":[],"function_type":"static","source":{"line":197,"path":"lib/init.lua"}},{"name":"GrantPermission","desc":"This functions grants a user a permission node and will revoke the negated permission node if it exists.","params":[{"name":"plr","desc":"","lua_type":"Player"},{"name":"permission","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":214,"path":"lib/init.lua"}},{"name":"RevokePermission","desc":"This functions revokes a user from a permission node.","params":[{"name":"plr","desc":"","lua_type":"Player"},{"name":"permission","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":227,"path":"lib/init.lua"}},{"name":"HasPermission","desc":"This function checks if a user has a specific permission node, negated permission nodes take priority and when present in the users permissions it will return false.","params":[{"name":"plr","desc":"","lua_type":"Player"},{"name":"permission","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":242,"path":"lib/init.lua"}}],"properties":[{"name":"Group","desc":"This property contains the Group class","lua_type":"Schema_Group","source":{"line":59,"path":"lib/init.lua"}},{"name":"_UserPermissions","desc":"This internal property contains the individual user permissions.","lua_type":"Map<Player,{string}>","private":true,"source":{"line":68,"path":"lib/init.lua"}},{"name":"_UserGroups","desc":"This internal property contains the individual user groups.","lua_type":"Map<Player,Group>","private":true,"source":{"line":77,"path":"lib/init.lua"}},{"name":"_Groups","desc":"This internal property contains the Permissions reference to the groups","lua_type":"Dictionary<Group>","private":true,"source":{"line":86,"path":"lib/init.lua"}}],"types":[],"name":"Permissions","desc":"This class was designed to track permissions for a user or a group for granting access to certain commands and features inside your game.\\n```md\\n    # Notes\\n\\n        ## Definitions - permission group\\n        - \\"permission node\\": This is a string which is represented as a permission that usually contains nodes(a literal \'.\')\\n\\n```","source":{"line":52,"path":"lib/init.lua"}}')}}]);