"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[443],{10645:e=>{e.exports=JSON.parse('{"functions":[],"properties":[{"name":"Groups","desc":"This is an array of [Group] objects that represent all the groups that [Permissions] should be aware of.","lua_type":"{Group}","source":{"line":76,"path":"lib/init.lua"}},{"name":"Users","desc":"A dictionary that which contains [Player.UserId] as the keys and [Permissions.UserPresetData] as the values.","lua_type":"Dictionary<UserPresetData>","source":{"line":92,"path":"lib/init.lua"}},{"name":"DefaultGroup","desc":"The default group is a [Group] that is automatically assigned to joining users.","lua_type":"Group","source":{"line":99,"path":"lib/init.lua"}}],"types":[{"name":"UserPresetData","desc":"The UserPresetData is a table that contains permission nodes and [Group] names that will be assigned to the user.","fields":[{"name":"Permissions","lua_type":"{string}","desc":"A array of permission nodes"},{"name":"Groups","lua_type":"{string}","desc":"An array of group names to be assigned to the user"}],"source":{"line":85,"path":"lib/init.lua"}}],"name":"Config","desc":"This class was designed to implement permissions & groups that get assigned to users used to restrict certain features across your game.\\n\\n## Configuration Example\\n```lua\\nlocal Permissions = require(PermissionsModule);\\ntype Group = Permissions.Group;\\n\\n-- The Group class\\nlocal Group: Permissions.Schema_Group = Permissions.Group;\\n\\n-- Any groups we will reuse in the Config we will need to store in a variable\\nlocal defaultGroup: Group = Group.new(\\"Default\\",{\\"example.default\\"});\\nlocal example1: Group = Group.new(\\"Example1\\",\\"example.permission1\\");\\n\\nreturn {\\n    Groups = {\\n        defaultGroup -- The default group also must still be added\\n\\n        -- \\"Example 1\\" would contain permission nodes example.permission1\\n        example1,\\n\\n        -- \\"Example 2\\" would inherit example1 permission nodes & example.permission2\\n        Group.new(\\"Example2\\",\\"example.permission2\\",example1),\\n\\n        -- \\"Example 3\\" would have the highest precedence a group could have\\n        -- \\"Example 3\\" would have the inherited example.permission1 permission node\\n        Group.new(\\"Example3\\"):SetPrecedence(0):SetInheritant(example1),\\n\\n        -- This will be used for later\\n        Group.new(\\"Developer\\",\\"example.superpermission\\",defaultGroup),\\n    },\\n    Users = {\\n        [\\"Player.UserId\\"] = {\\n        --[[\\n            You can place permission nodes inside Permissions to\\n            automatically assign those permissions to that user.\\n        --]]\\n            Permissions = {\\"example.only_I_have_this_permission\\"},\\n\\n        --[[\\n            You can place group names inside of Groups to have\\n            the user automatically be assigned to those Groups.\\n\\n            This user would automatically be in the \\"Example 2\\" group\\n        --]]\\n            Groups = {\\"Example2\\"}\\n        },\\n        [\\"ownerid\\"] = {\\n            -- Optionally grant this specific user all permissions\\n            Permissions = {\\"*\\"},\\n\\n            -- Assign this user to the Developer group we made earlier\\n            Groups = {\\"Developer\\"}\\n        }\\n    },\\n    DefaultGroup = defaultGroup\\n}\\n```\\n\\n:::note\\n\\n>You still have to add the Default Group to the [Config.Groups] table.\\n\\n:::","source":{"line":69,"path":"lib/init.lua"}}')}}]);